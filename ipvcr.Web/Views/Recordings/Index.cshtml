@model ipvcr.Web.Models.HomeRecordingsViewModel
@using ipvcr.Scheduling
@{
    ViewData["Title"] = "Scheduled recording";

    ChannelInfo FindChannel(string channelUri)
    {
        return Model?.Channels?.FirstOrDefault(c => c.Uri.Equals(channelUri)) ?? new ChannelInfo("", "", "", new
        Uri("http://localhost"), "");
    }

}

@section head {
    <script>
    const obfuscateChannelUri = function(uri) {
        // input uri is "http://secret.host.tv/username/password/219885"
        // transform to "http://secr.../219885"
        const parts = uri.split('/');
        const first4letterersofhostname = parts[2].substring(0, 4);
        const lastpart = parts[parts.length - 1];
        const obfuscatedUri = parts[0] + '://' + first4letterersofhostname + '...' + '/' + lastpart;
        return obfuscatedUri;
    }
    </script>
}
@if (Model.Channels.Count == 0)
{
    <label class="label-readonly warning-label">
        No channels available! Use the settings page to upload a m3u file.
    </label>
}
else
{
    <label class="label-readonly info-label">
        <span><Var>Recording path</Var>: @Model.RecordingPath</span><br />
        <span><Var>Channel count</Var>: @Model.Channels.Count</span>
    </label>
}
<div class="text-center">
    @{
        var data = Model.Recordings;
        if (data != null)
        {
            <h2>Upcoming recordings</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Time</th>
                        <th>Channel</th>
                        <th>Name</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in data)
                    {
                        var chan = FindChannel(item.ChannelUri);
                        <tr>
                            <td><img src="@chan.Logo" /></td>
                            <td>Start: @item.StartTime<br />
                                End: @item.EndTime</td>
                            <td title="@item.ChannelName">@item.ChannelName<br><label class="info-label">@item.Obfuscate()</label>
                            </td>
                            <td title="@item.Filename">@item.Name</td>
                            <td>
                                <button title="Edit" onclick="handleEdit('@item.Id')">
                                    <i class="bi bi-pencil"></i>
                                </button>
                            </td>
                            <td>
                                <button title="Delete" onclick="handleDelete('@item.Id')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    }
    @if (Model.Channels.Any())
    {
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#recordingFormModal">
            Add New Recording
        </button>
    }
    else
    {
        <label class="label-readonly warning-label">
            No channels available! Use the settings page to upload a m3u file.
        </label>
    }
    <div class="modal fade" id="recordingFormModal" tabindex="-1" aria-labelledby="recordingFormModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createRecordingFormModalLabel">Add New Recording</h5>
                    <h5 class="modal-title" id="editRecordingFormModalLabel">Edit Recording</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addRecordingForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="Id" id="Id" />
                        <img id="ChannelLogo" src="@Model.Channels.First().Logo" alt="Channel Logo"
                            class="channel-logo" />
                        <div class="form-group">
                            <label for="Name">Recording name</label>
                            <input type="text" class="form-control" id="Name" name="Name" required />
                        </div>
                        <div class="form-group">
                            <label for="Description">Description</label>
                            <input type="hidden" class="form-control" id="Description" name="Description" />
                            <label id="DescriptionLabel" class="label-readonly info-label hidden-label"></label>
                        </div>
                        <div class="form-group">
                            <label for="ChannelUri">Channel</label>
                            <select class="form-control" id="ChannelUri" name="ChannelUri" required>
                                @foreach (var channel in Model.Channels)
                                {
                                    <option value="@channel.Uri">@channel.Name</option>
                                }
                            </select>
                            <input type="hidden" name="ChannelName" id="ChannelName" />
                        </div>
                        <div class="form-group">
                            <label for="StartTime">Start Time</label>
                            <input type="datetime-local" class="form-control" id="StartTime" name="StartTime"
                                value="@DateTime.Now.AddDays(1).ToString("yyyy-MM-ddTHH:mm")" required />
                        </div>
                        <div class="form-group">
                            <label for="EndTime">End Time</label>
                            <input type="datetime-local" class="form-control" id="EndTime" name="EndTime"
                                value="@DateTime.Now.AddHours(25).ToString("yyyy-MM-ddTHH:mm")" required />
                        </div>
                        <div class="form-group label-recordingfilename hidden-label" id="label-recordingfilename">
                            <label for="Filename">Recording will be saved to</label>
                            <input type="hidden" class="form-control" id="Filename" name="Filename" required />
                            <label id="FilenameLabel" class="label-readonly info-label"></label>
                        </div>
                        <input type="hidden" name="TimezoneOffset" id="TimezoneOffset" />
                        <button type="button" class="btn btn-primary" id="submitFormButton" disabled>Save</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        const timezoneOffset = new Date().getTimezoneOffset();

        function showModal() {
            const modal = new bootstrap.Modal('#recordingFormModal');
            modal.show();
        }

        const channelLogos = {@{
                foreach (var channel in Model.Channels)
            {
                <text>'@channel.Uri': '@channel.Logo',</text>
        }
        } };

    $(document).ready(function () {
        const modal = new bootstrap.Modal('#recordingFormModal');

        // Hide modal when page loads
        modal.hide();

        // Clear form when modal is closed
        $('#recordingFormModal').on('hidden.bs.modal', function () {
            $(this).find('form').trigger('reset');
            document.getElementById('Id').value = '';
            document.getElementById('Name').value = '';
            document.getElementById('Description').value = '';
            document.getElementById('ChannelName').value = '';
            document.getElementById('ChannelUri').value = '';
            document.getElementById('ChannelUri').options[0].selected = true;
            // set starttime to today + 1 day
            document.getElementById('StartTime').value = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().slice(0, 16);
            // set endtime to starttime + 1 hour
            document.getElementById('EndTime').value = new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString().slice(0, 16);
            document.getElementById('TimezoneOffset').value = timezoneOffset;
            document.getElementById('FilenameLabel').innerText = '';
            document.getElementById('DescriptionLabel').innerText = '';
            updateChannelLogo();
            document.getElementById('createRecordingFormModalLabel').hidden = false;
            document.getElementById('editRecordingFormModalLabel').hidden = true;
        });
        document.getElementById('TimezoneOffset').value = timezoneOffset;

    });

    

    const handleSubmitButton = function () {
        const recording = readFormInputToRecording();
        const isEdit = recording.id && recording.id !== '' && recording.id !== 'undefined';
        const posturi = isEdit ? "@RouteHelper.GetRoute(ControllerRoutes.RecordingsController, ActionRoutes.Update)" : "@RouteHelper.GetRoute(ControllerRoutes.RecordingsController, ActionRoutes.Create)";
        fetch(posturi, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Include if needed
            },
            body: JSON.stringify(recording)
        })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Failed to submit form');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const handleDelete = function (id) {
        // make a request to delete the recording
        console.log('Deleting recording with id: ' + id);

        fetch(`@RouteHelper.GetRoute(ControllerRoutes.RecordingsController, ActionRoutes.Delete)/${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Failed to delete recording');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const readFormInputToRecording = function () {
        const recording = {
            name: document.getElementById('Name').value,
            description: document.getElementById('Description').value,
            filename: document.getElementById('Filename').value,
            channelUri: document.getElementById('ChannelUri').value,
            channelName: document.getElementById('ChannelName').value,
            startTime: document.getElementById('StartTime').value,
            endTime: document.getElementById('EndTime').value,
        };
        const theid = document.getElementById('Id').value;
        if (theid !== '') {
            recording["id"] = theid;
        }
        return recording;
    }

    const handleEdit = function (id) {
        // make a request to edit the recording
        console.log('Fetch recording with id: ' + id);
        fetch(` /@ControllerRoutes.RecordingsController/${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    document.getElementById('Id').value = data.id;
                    document.getElementById('Name').value = data.name;
                    document.getElementById('Description').value = data.description;
                    document.getElementById('ChannelUri').value = data.channelUri;
                    document.getElementById('StartTime').value = data.startTime;
                    document.getElementById('EndTime').value = data.endTime;
                    document.getElementById('FilenameLabel').innerText = data.filename;
                    document.getElementById('DescriptionLabel').innerText = data.description;
                    document.getElementById('createRecordingFormModalLabel').hidden = true;
                    document.getElementById('editRecordingFormModalLabel').hidden = false;
                    updateChannelLogo();
                    showModal();
                } else {
                    console.error('Failed to load recording data');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const updateChannelLogo = function () {
        const channelUri = document.getElementById('ChannelUri').value;
        if (channelUri.length > 0) {
            const channelLogo = channelLogos[channelUri];
            document.getElementById('ChannelLogo').src = channelLogo;
            document.getElementById('ChannelLogo').alt = parseChannelName(document.getElementById('ChannelUri').selectedOptions[0].text) + ' logo';
        }
    }

    const parseChannelName = function (fullChannelName) {
        // channel name *may be* in this form "4K | RTL 7"
        // in that case, split by " | " and take the second part
        const parts = fullChannelName.split('|');
        if (parts.length > 1) {
            return parts[1].trim();
        }
        return fullChannelName.trim();
    }

    const sanitizeInput = function (input) {
        // Remove any unwanted characters from the input including space
        return input.replace(/[^a-zA-Z0-9 _]/g, '');
    }

    const formatFileDate = function (date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}${month}${day}_${hours}${minutes}`;
    }

    const formatNiceDate = function (date) {
        // format to mmm dd, yyyy hh:mm where mmm = monthname
        const options = { year: 'numeric', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' };
        return date.toLocaleString('en-US', options).replace(',', '');
    }

    const updateFormState = function () {
        const name = sanitizeInput(document.getElementById('Name').value);
        const startTime = document.getElementById('StartTime').value;
        const rootpath = '@Model.RecordingPath';
        const channelName = parseChannelName(document.getElementById('ChannelUri').selectedOptions[0].text);
        const channelUri = document.getElementById('ChannelUri').value;
        updateChannelLogo();

        // if name is empty, startTime is empty, or channelName is empty, disable the submit button
        if (name === '' || startTime === '' || channelName === '' || channelUri === '') {
            document.getElementById('submitFormButton').disabled = true;
            document.getElementById('FilenameLabel').innerText = '';
            document.getElementById('DescriptionLabel').innerText = '';
            document.getElementById('DescriptionLabel').classList.add('hidden-label');
            document.getElementById('label-recordingfilename').classList.add('hidden-label');
            return;
        }

        document.getElementById('Name').value = name; // Update the input field with the sanitized value
        document.getElementById('TimezoneOffset').value = new Date().getTimezoneOffset();
        document.getElementById('ChannelName').value = channelName;

        if (startTime !== '') {
            // format the startTime as yyyymmddHHmm, e.g., 202508070605
            const startTimeFormatted = formatFileDate(new Date(startTime)) + startTime.split('T')[1].replace(':', '').substring(0, 4);
            const filename = rootpath + '/' + `${name}_${startTimeFormatted}.mp4`.replace(/ /g, '_').toLowerCase();
            document.getElementById('Filename').value = filename;
            document.getElementById('FilenameLabel').innerText = filename;

            // Set the Description field based on the Name, ChannelName, and StartTime
            var niceStartTime = formatNiceDate(new Date(startTime));
            const description = name + ' - recorded from ' + channelName + ' at ' + niceStartTime;
            document.getElementById('Description').value = description;
            document.getElementById('DescriptionLabel').innerText = description;
            document.getElementById('DescriptionLabel').classList.remove('hidden-label');
            document.getElementById('label-recordingfilename').classList.remove('hidden-label');
        }

        // Check if all form controls have a value
        // and enable/disable the submit button accordingly
        const submitButton = document.getElementById('submitFormButton');
        const formControls = document.querySelectorAll('input.form-control');
        const allControlsHaveValue = Array.from(formControls).every(control => control.value);
        submitButton.disabled = !allControlsHaveValue;
    }

    document.getElementById('Name').addEventListener('input', updateFormState);
    document.getElementById('ChannelUri').addEventListener('input', updateFormState);
    document.getElementById('StartTime').addEventListener('input', updateFormState);
    document.getElementById('submitFormButton').addEventListener('click', function () {
        handleSubmitButton();
    });
    document.getElementById('EndTime').addEventListener('input', updateFormState);
</script>
}