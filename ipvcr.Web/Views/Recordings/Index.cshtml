@model ipvcr.Web.Models.HomeRecordingsViewModel
@using ipvcr.Scheduling
@{
    ViewData["Title"] = "Scheduled recording";

    ChannelInfo FindChannel(string channelUri)
    {
        return Model?.Channels?.FirstOrDefault(c => c.Uri.Equals(channelUri)) ?? new ChannelInfo("", "", "", new
        Uri("http://localhost"), "");
    }

}

@section head {
    <script>
    const obfuscateChannelUri = function(uri) {
        // input uri is "http://secret.host.tv/username/password/219885"
        // transform to "http://secr.../219885"
        const parts = uri.split('/');
        const first4letterersofhostname = parts[2].substring(0, 4);
        const lastpart = parts[parts.length - 1];
        const obfuscatedUri = parts[0] + '://' + first4letterersofhostname + '...' + '/' + lastpart;
        return obfuscatedUri;
    }
    </script>
}
<div class="hero-section mb-4">
    <img src="/img/ipvcr.png" class="img-fluid w-60" alt="IPVCR Hero Image" style="object-fit: cover; max-height: 400px; width: 60%;">
</div>

<div class="container-fluid px-4">
    @if (Model.Channels.Count == 0)
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            No channels available! Use the settings page to upload a m3u file.
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card bg-light">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-info-circle text-primary me-2 fs-4"></i>
                            <div>
                                <div><strong>Recording path:</strong> @Model.RecordingPath</div>
                                <div><strong>Channel count:</strong> @Model.Channels.Count</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-12">
            @{
                var data = Model.Recordings;
                if (data != null && data.Any())
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="bi bi-calendar-event me-2"></i>Upcoming Recordings
                            </h5>
                            @if (Model.Channels.Any())
                            {
                                <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#recordingFormModal">
                                    <i class="bi bi-plus-lg"></i> Add New Recording
                                </button>
                            }
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover table-striped mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 60px"></th>
                                            <th>Time</th>
                                            <th>Channel</th>
                                            <th>Program</th>
                                            <th class="text-center" style="width: 100px">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in data)
                                        {
                                            var chan = FindChannel(item.ChannelUri);
                                            <tr>
                                                <td class="align-middle text-center">
                                                    <img src="@chan.Logo" class="img-fluid rounded" style="max-height: 40px; max-width: 40px;" alt="Channel logo" />
                                                </td>
                                                <td class="align-middle">
                                                    <div class="d-flex flex-column">
                                                        <span class="fw-bold">
                                                            <i class="bi bi-play-fill text-success"></i> @item.StartTime
                                                        </span>
                                                        <span class="text-muted small">
                                                            <i class="bi bi-stop-fill text-danger"></i> @item.EndTime
                                                        </span>
                                                    </div>
                                                </td>
                                                <td class="align-middle" title="@item.ChannelName">
                                                    <div class="fw-bold">@item.ChannelName</div>
                                                    <span class="badge bg-light text-dark small">@item.Obfuscate()</span>
                                                </td>
                                                <td class="align-middle" title="@item.Filename">
                                                    <div>@item.Name</div>
                                                    <small class="text-muted text-truncate d-inline-block" style="max-width: 250px;">
                                                        <i class="bi bi-file-earmark-play"></i> @System.IO.Path.GetFileName(item.Filename)
                                                    </small>
                                                </td>
                                                <td class="align-middle text-center">
                                                    <div class="btn-group" role="group">
                                                        <button title="Edit" class="btn btn-sm btn-outline-primary" onclick="handleEdit('@item.Id')">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        <button title="Edit Code" class="btn btn-sm btn-outline-secondary" onclick="handleEditTask('@item.Id')">
                                                            <i class="bi bi-braces"></i>
                                                        </button>
                                                        <button title="Delete" class="btn btn-sm btn-outline-danger" onclick="handleDelete('@item.Id')">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card shadow-sm">
                        <div class="card-body text-center py-5">
                            <i class="bi bi-calendar-x text-muted" style="font-size: 3rem;"></i>
                            <h4 class="mt-3">No recordings scheduled</h4>
                            <p class="text-muted">Start by adding a new recording.</p>
                            @if (Model.Channels.Any())
                            {
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#recordingFormModal">
                                    <i class="bi bi-plus-lg"></i> Add New Recording
                                </button>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (Model.Channels.Any() == false)
    {
        <div class="alert alert-warning mt-4">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            No channels available! Use the settings page to upload a m3u file.
        </div>
    }

    <div class="modal fade" id="recordingFormModal" tabindex="-1" aria-labelledby="recordingFormModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow-sm">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title mb-0" id="createRecordingFormModalLabel">
                        <i class="bi bi-plus-circle me-2"></i>Add New Recording
                    </h5>
                    <h5 class="modal-title mb-0 hidden-item" id="editRecordingFormModalLabel">
                        <i class="bi bi-pencil-square me-2"></i>Edit Recording
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addRecordingForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="Id" id="Id" />
                        <div class="row mb-3">
                            <div class="col-md-3 text-center">
                                <img id="ChannelLogo" src="@(Model.Channels.FirstOrDefault()?.Logo ?? "")" alt="Channel Logo"
                                    class="img-fluid rounded mb-2" style="max-height: 100px; max-width: 100px; object-fit: contain;" />
                            </div>
                            <div class="col-md-9">
                                <div class="form-group mb-3">
                                    <label for="Name" class="form-label fw-bold">Recording name</label>
                                    <input type="text" class="form-control" id="Name" name="Name" required />
                                </div>
                                <div class="form-group mb-3">
                                    <label for="Description" class="form-label fw-bold">Description</label>
                                    <input type="hidden" class="form-control" id="Description" name="Description" />
                                    <label id="DescriptionLabel" class="form-control bg-light text-muted hidden-label"></label>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="ChannelUri" class="form-label fw-bold">Channel</label>
                                    <select class="form-select" id="ChannelUri" name="ChannelUri" required>
                                        @foreach (var channel in Model.Channels)
                                        {
                                            <option value="@channel.Uri">@channel.Name</option>
                                        }
                                    </select>
                                    <input type="hidden" name="ChannelName" id="ChannelName" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group mb-3">
                                            <label for="StartTime" class="form-label fw-bold">Start Time</label>
                                            <input type="datetime-local" class="form-control" id="StartTime" name="StartTime" required />
                                            <input type="hidden" id="StartTimeOffset" name="StartTimeOffset" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group mb-3">
                                            <label for="EndTime" class="form-label fw-bold">End Time</label>
                                            <input type="datetime-local" class="form-control" id="EndTime" name="EndTime" required />
                                            <input type="hidden" id="EndTimeOffset" name="EndTimeOffset" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group mb-3 label-recordingfilename hidden-label" id="label-recordingfilename">
                            <label for="Filename" class="form-label fw-bold">Recording will be saved to</label>
                            <input type="hidden" class="form-control" id="Filename" name="Filename" required />
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-file-earmark-play"></i></span>
                                <label id="FilenameLabel" class="form-control bg-light text-muted text-truncate"></label>
                            </div>
                        </div>
                        <input type="hidden" name="TimezoneOffset" id="TimezoneOffset" />
                        <div class="card-footer bg-light mt-4 p-3 d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">
                                <i class="bi bi-x-circle me-1"></i>Cancel
                            </button>
                            <button type="button" class="btn btn-primary" id="submitFormButton" disabled>
                                <i class="bi bi-save me-1"></i>Save
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Task Edit Modal -->
<div class="modal fade" id="taskEditModal" tabindex="-1" aria-labelledby="taskEditModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg" style="resize: both; overflow: hidden; min-width: 500px; min-height: 300px;">
        <div class="modal-content shadow-sm h-100">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title mb-0" id="taskEditModalLabel">
                    <i class="bi bi-braces me-2"></i>Edit Task Definition: <span id="TaskRecordingName"></span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column" style="overflow: auto;">
                <form id="taskEditForm" class="d-flex flex-column flex-grow-1">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="TaskRecordingId" name="TaskRecordingId" />
                    <div class="form-group mb-3 flex-grow-1 d-flex flex-column">
                        <div class="mb-2 d-flex justify-content-between align-items-center">
                            <label for="TaskContent" class="form-label fw-bold">Task Definition</label>
                            <small class="text-muted">Edit the task definition below</small>
                        </div>
                        <!-- Hidden textarea for form submission -->
                        <textarea class="d-none" id="TaskContent" name="TaskContent"></textarea>
                        <!-- Visible code editor with syntax highlighting -->
                        <div id="editor-container" class="flex-grow-1 border rounded" style="position: relative;">
                            <pre class="m-0 h-100"><code id="codeEditor" class="language-bash h-100" style="font-size: 0.9rem; min-height: 200px; overflow: auto; padding: 10px;"></code></pre>
                        </div>
                    </div>
                    <div class="card-footer bg-light mt-2 p-3 d-flex justify-content-between">
                        <div>
                            <small class="text-muted">Drag the bottom-right corner to resize</small>
                        </div>
                        <div>
                            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">
                                <i class="bi bi-x-circle me-1"></i>Cancel
                            </button>
                            <button type="button" class="btn btn-primary" id="submitTaskButton">
                                <i class="bi bi-save me-1"></i>Save
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const timezoneOffset = new Date().getTimezoneOffset();

        function showModal() {
            const modal = new bootstrap.Modal('#recordingFormModal');
            modal.show();
        }

        const channelLogos = {@{
                foreach (var channel in Model.Channels)
            {
                <text>'@channel.Uri': '@channel.Logo',</text>
        }
        } };

    $(document).ready(function () {
        const modal = new bootstrap.Modal('#recordingFormModal');

        // Hide modal when page loads
        modal.hide();

        // Set timezone offset values for datetime fields
        document.getElementById('TimezoneOffset').value = timezoneOffset;
        document.getElementById('StartTimeOffset').value = timezoneOffset;
        document.getElementById('EndTimeOffset').value = timezoneOffset;
        
        // Initialize datetime fields with timezone-aware values
        const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000);
        const tomorrowPlusHour = new Date(Date.now() + 25 * 60 * 60 * 1000);
        
        // Format datetime-local inputs with the correct local time
        document.getElementById('StartTime').value = tomorrow.toISOString().slice(0, 16);
        document.getElementById('EndTime').value = tomorrowPlusHour.toISOString().slice(0, 16);

        // Clear form when modal is closed
        $('#recordingFormModal').on('hidden.bs.modal', function () {
            $(this).find('form').trigger('reset');
            document.getElementById('Id').value = '';
            document.getElementById('Name').value = '';
            document.getElementById('Description').value = '';
            document.getElementById('ChannelName').value = '';
            document.getElementById('ChannelUri').value = '';
            document.getElementById('ChannelUri').options[0].selected = true;
            // set starttime to today + 1 day
            document.getElementById('StartTime').value = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().slice(0, 16);
            // set endtime to starttime + 1 hour
            document.getElementById('EndTime').value = new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString().slice(0, 16);
            document.getElementById('TimezoneOffset').value = timezoneOffset;
            document.getElementById('StartTimeOffset').value = timezoneOffset;
            document.getElementById('EndTimeOffset').value = timezoneOffset;
            document.getElementById('FilenameLabel').innerText = '';
            document.getElementById('DescriptionLabel').innerText = '';
            updateChannelLogo();
            document.getElementById('createRecordingFormModalLabel').classList.remove("hidden-item");
            document.getElementById('editRecordingFormModalLabel').classList.add("hidden-item");
        });
        document.getElementById('TimezoneOffset').value = timezoneOffset;
        
        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

    const handleSubmitButton = function () {
        const recording = readFormInputToRecording();
        const isEdit = recording.id && recording.id !== '' && recording.id !== 'undefined';
        const posturi = isEdit ? "@RouteHelper.GetRoute(ControllerRoutes.RecordingsController, ActionRoutes.Update)" : "@RouteHelper.GetRoute(ControllerRoutes.RecordingsController, ActionRoutes.Create)";
        fetch(posturi, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Include if needed
            },
            body: JSON.stringify(recording)
        })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Failed to submit form');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const handleDelete = function (id) {
        // make a request to delete the recording
        console.log('Deleting recording with id: ' + id);

        fetch(`@RouteHelper.GetRoute(ControllerRoutes.RecordingsController, ActionRoutes.Delete)/${id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Failed to delete recording');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const handleEditTask = function(id) {
        // Fetch task definition content from server
        console.log('Fetch task definition for recording with id: ' + id);
        fetch(`/Recordings/EditTask/${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    // Populate the task edit modal
                    document.getElementById('TaskRecordingId').value = id;
                    document.getElementById('TaskContent').value = data.content;
                    document.getElementById('TaskRecordingName').innerText = data.name || 'Task Definition';
                    
                    // Set the content in the code editor with syntax highlighting
                    const codeEditor = document.getElementById('codeEditor');
                    codeEditor.textContent = data.content;
                    
                    // Apply syntax highlighting
                    hljs.highlightElement(codeEditor);
                    
                    // Setup the code editor for editing
                    setupCodeEditor();
                    
                    // Show the modal
                    const taskModal = new bootstrap.Modal('#taskEditModal');
                    taskModal.show();
                } else {
                    console.error('Failed to load task definition');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const handleTaskSubmit = function() {
        const id = document.getElementById('TaskRecordingId').value;
        // Get content from the editable code element
        const taskContent = document.getElementById('codeEditor').textContent;
        // Also update the hidden textarea
        document.getElementById('TaskContent').value = taskContent;
        
        fetch('/Recordings/EditTask', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            body: JSON.stringify({
                id: id,
                taskfile: taskContent
            })
        })
            .then(response => {
                if (response.ok) {
                    // Close the modal and reload the page
                    const taskModal = bootstrap.Modal.getInstance(document.getElementById('taskEditModal'));
                    taskModal.hide();
                    location.reload();
                } else {
                    console.error('Failed to save task definition');
                }
            })
            .catch(error => console.error('Error:', error));
    }
    
    // Function to make the code element editable while preserving syntax highlighting
    const setupCodeEditor = function() {
        const codeElement = document.getElementById('codeEditor');
        
        // Make the code element editable
        codeElement.contentEditable = 'true';
        codeElement.spellcheck = false;
        
        // Focus and select all content when clicked
        codeElement.addEventListener('focus', function() {
            if (!this.hasSelection) {
                const range = document.createRange();
                range.selectNodeContents(this);
                const selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(range);
                this.hasSelection = true;
            }
        });
        
        // Reset selection state when blurred
        codeElement.addEventListener('blur', function() {
            this.hasSelection = false;
        });
        
        // Reapply highlighting on input
        codeElement.addEventListener('input', function() {
            // We need to save the caret position
            const selection = window.getSelection();
            const range = selection.getRangeAt(0);
            const preCaretRange = range.cloneRange();
            preCaretRange.selectNodeContents(this);
            preCaretRange.setEnd(range.endContainer, range.endOffset);
            const caretOffset = preCaretRange.toString().length;

            // Remove highlight classes temporarily
            const content = this.textContent;
            
            // Reapply syntax highlighting after a short delay to improve performance
            clearTimeout(this.highlightTimeout);
            this.highlightTimeout = setTimeout(() => {
                hljs.highlightElement(this);
                
                // Restore caret position
                restoreCaretPosition(this, caretOffset);
            }, 150);
        });
        
        // Handle tab key for indentation
        codeElement.addEventListener('keydown', function(e) {
            if (e.key === 'Tab') {
                e.preventDefault();
                document.execCommand('insertText', false, '    '); // Insert 4 spaces
            }
        });
    }
    
    // Helper function to restore caret position after highlighting
    const restoreCaretPosition = function(element, offset) {
        let charIndex = 0;
        let foundNode = null;
        let foundPosition = null;
        
        const traverseNodes = function(node) {
            if (foundNode) return;
            
            if (node.nodeType === Node.TEXT_NODE) {
                const nodeLength = node.textContent.length;
                if (charIndex + nodeLength >= offset) {
                    foundNode = node;
                    foundPosition = offset - charIndex;
                    return;
                }
                charIndex += nodeLength;
            } else {
                for (let i = 0; i < node.childNodes.length; i++) {
                    traverseNodes(node.childNodes[i]);
                    if (foundNode) break;
                }
            }
        };
        
        traverseNodes(element);
        
        if (foundNode) {
            const range = document.createRange();
            const selection = window.getSelection();
            
            range.setStart(foundNode, foundPosition);
            range.collapse(true);
            
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }

    const readFormInputToRecording = function () {
        const recording = {
            name: document.getElementById('Name').value,
            description: document.getElementById('Description').value,
            filename: document.getElementById('Filename').value,
            channelUri: document.getElementById('ChannelUri').value,
            channelName: document.getElementById('ChannelName').value,
            startTime: document.getElementById('StartTime').value,
            endTime: document.getElementById('EndTime').value,
        };
        const theid = document.getElementById('Id').value;
        if (theid !== '') {
            recording["id"] = theid;
        }
        return recording;
    }

    const handleEdit = function (id) {
        // make a request to edit the recording
        console.log('Fetch recording with id: ' + id);
        fetch(` /@ControllerRoutes.RecordingsController/${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data) {
                    document.getElementById('Id').value = data.id;
                    document.getElementById('Name').value = data.name;
                    document.getElementById('Description').value = data.description;
                    document.getElementById('ChannelUri').value = data.channelUri;
                    document.getElementById('StartTime').value = data.startTime;
                    document.getElementById('EndTime').value = data.endTime;
                    document.getElementById('FilenameLabel').innerText = data.filename;
                    document.getElementById('DescriptionLabel').innerText = data.description;
                    document.getElementById('createRecordingFormModalLabel').hidden = true;
                    document.getElementById('editRecordingFormModalLabel').hidden = false;
                    document.getElementById('createRecordingFormModalLabel').classList.add('hidden-item');
                    document.getElementById('editRecordingFormModalLabel').classList.remove('hidden-item');
                    updateChannelLogo();
                    showModal();
                } else {
                    console.error('Failed to load recording data');
                }
            })
            .catch(error => console.error('Error:', error));
    }

    const updateChannelLogo = function () {
        const channelUri = document.getElementById('ChannelUri').value;
        if (channelUri.length > 0) {
            const channelLogo = channelLogos[channelUri];
            document.getElementById('ChannelLogo').src = channelLogo;
            document.getElementById('ChannelLogo').alt = parseChannelName(document.getElementById('ChannelUri').selectedOptions[0].text) + ' logo';
        }
    }

    const parseChannelName = function (fullChannelName) {
        // channel name *may be* in this form "4K | RTL 7"
        // in that case, split by " | " and take the second part
        const parts = fullChannelName.split('|');
        if (parts.length > 1) {
            return parts[1].trim();
        }
        return fullChannelName.trim();
    }

    const sanitizeInput = function (input) {
        // Remove any unwanted characters from the input including space
        return input.replace(/[^a-zA-Z0-9 _]/g, '');
    }

    const formatFileDate = function (date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}${month}${day}_${hours}${minutes}`;
    }

    const formatNiceDate = function (date) {
        // format to mmm dd, yyyy hh:mm where mmm = monthname
        const options = { year: 'numeric', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' };
        return date.toLocaleString('en-US', options).replace(',', '');
    }

    const updateFormState = function () {
        const name = sanitizeInput(document.getElementById('Name').value);
        const startTime = document.getElementById('StartTime').value;
        const rootpath = '@Model.RecordingPath';
        const channelName = parseChannelName(document.getElementById('ChannelUri').selectedOptions[0].text);
        const channelUri = document.getElementById('ChannelUri').value;
        updateChannelLogo();

        // if name is empty, startTime is empty, or channelName is empty, disable the submit button
        if (name === '' || startTime === '' || channelName === '' || channelUri === '') {
            document.getElementById('submitFormButton').disabled = true;
            document.getElementById('FilenameLabel').innerText = '';
            document.getElementById('DescriptionLabel').innerText = '';
            document.getElementById('DescriptionLabel').classList.add('hidden-item');
            document.getElementById('label-recordingfilename').classList.add('hidden-item');
            return;
        }

        document.getElementById('Name').value = name; // Update the input field with the sanitized value
        document.getElementById('TimezoneOffset').value = new Date().getTimezoneOffset();
        document.getElementById('ChannelName').value = channelName;

        if (startTime !== '') {
            // format the startTime as yyyymmddHHmm, e.g., 202508070605
            const startTimeFormatted = formatFileDate(new Date(startTime)) + startTime.split('T')[1].replace(':', '').substring(0, 4);
            const filename = rootpath + '/' + `${name}_${startTimeFormatted}.mp4`.replace(/ /g, '_').toLowerCase();
            document.getElementById('Filename').value = filename;
            document.getElementById('FilenameLabel').innerText = filename;

            // Set the Description field based on the Name, ChannelName, and StartTime
            var niceStartTime = formatNiceDate(new Date(startTime));
            const description = name + ' - recorded from ' + channelName + ' at ' + niceStartTime;
            document.getElementById('Description').value = description;
            document.getElementById('DescriptionLabel').innerText = description;
            document.getElementById('DescriptionLabel').classList.remove('hidden-item');
            document.getElementById('label-recordingfilename').classList.remove('hidden-item');
        }

        // Check if all form controls have a value
        // and enable/disable the submit button accordingly
        const submitButton = document.getElementById('submitFormButton');
        const formControls = document.querySelectorAll('input.form-control');
        const allControlsHaveValue = Array.from(formControls).every(control => control.value);
        submitButton.disabled = !allControlsHaveValue;
    }

    document.getElementById('Name').addEventListener('input', updateFormState);
    document.getElementById('ChannelUri').addEventListener('input', updateFormState);
    document.getElementById('StartTime').addEventListener('input', updateFormState);
    document.getElementById('submitFormButton').addEventListener('click', function () {
        handleSubmitButton();
    });
    document.getElementById('EndTime').addEventListener('input', updateFormState);
    
    // Add event listener for task edit submit button
    document.getElementById('submitTaskButton').addEventListener('click', function() {
        handleTaskSubmit();
    });
</script>
}